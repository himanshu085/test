pipeline {
    agent any

    tools {
        nodejs 'NodeJS 18'
    }

    environment {
        PRIORITY = 'P0'
        SLACK_CHANNEL = '#jenkins-notification'
        EMAIL_RECIPIENTS = 'himanshu.parashar.snaatak@mygurukulam.co'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Cloud-NInja-snaatak/frontend-api.git',
                        credentialsId: 'himanshu-git-credential'
                    ]]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('frontend') {
                    sh '''
                        npm install
                        npm install --save-dev @testing-library/react@12.1.5 @testing-library/jest-dom@5.16.5
                    '''
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('frontend') {
                    sh '''
                        npm test -- --watchAll=false > test.log 2>&1 || true
                    '''
                }
            }
        }

        stage('Generate Coverage Report') {
            steps {
                dir('frontend') {
                    sh '''
                        npm test -- --coverage --coverageDirectory=coverage --watchAll=false || true
                    '''
                }
            }
        }

        stage('Publish Coverage Report') {
            steps {
                publishHTML(target: [
                    reportDir: 'coverage/lcov-report',
                    reportFiles: 'index.html',
                    reportName: 'React Test Coverage Report'
                ])
            }
        }
    }

    post {
        success {
            notify('SUCCESS', env.PRIORITY, env.SLACK_CHANNEL, env.EMAIL_RECIPIENTS)
        }
        failure {
            notify('FAILURE', env.PRIORITY, env.SLACK_CHANNEL, env.EMAIL_RECIPIENTS)
        }
        always {
            archiveArtifacts artifacts: 'frontend/coverage/**, frontend/test.log', fingerprint: true
            echo "Build completed"
            deleteDir()
        }
    }
}

def notify(status, priority, slackChannel, emailRecipients) {
    def icons = [SUCCESS: 'üü¢', FAILURE: 'üî¥']
    def results = [
        P0: [SUCCESS: 'Urgent job completed successfully! ‚úÖ', FAILURE: 'Urgent job FAILED! üö®'],
        P1: [SUCCESS: 'Important job completed successfully! ‚úÖ', FAILURE: 'Important job FAILED! ‚ö†Ô∏è'],
        P2: [SUCCESS: 'Standard job completed! ‚úÖ', FAILURE: 'Standard job FAILED. ‚ùó']
    ]
    def colors = [SUCCESS: 'good', FAILURE: 'danger']
    def subjects = [
        SUCCESS: "${priority} SUCCESS: Jenkins Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        FAILURE: "${priority} FAILURE: Jenkins Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    ]

    // ‚è∞ Updated to IST
    def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('Asia/Kolkata'))

    def triggeredBy = currentBuild.getBuildCauses().find { it.userId }?.userName ?: "Automated/Unknown"
    def coverageUrl = "${env.BUILD_URL}React_Test_Coverage_Report/"

    def failureReason = ""
    if (status == "FAILURE") {
        def logLines = currentBuild.rawBuild.getLog(100)
        def errorLine = logLines.find { it.contains("Exception") || it.contains("ERROR") || it.contains("FAILURE") }
        failureReason = errorLine ? "<p><strong>Reason for Failure:</strong> ${errorLine.trim()}</p>" : "<p><strong>Reason for Failure:</strong> Not found in last 100 log lines.</p>"
    }

    def slackMessage = """
${icons[status]} *${priority} ${status}*
*Status:* ${results[priority][status]}
*Job:* `${env.JOB_NAME}`
*Build Number:* #${env.BUILD_NUMBER}
*Triggered By:* ${triggeredBy}
*Time (IST):* ${buildTime}
üîó *Build URL:* <${env.BUILD_URL}|Click to view build>
üìä *Coverage Report:* <${coverageUrl}|View Coverage>${status == "FAILURE" ? "\n‚ùå *Reason for Failure:* `${failureReason}`" : ""}
"""

    def emailBody = """
<html>
  <body>
    <p><strong>${icons[status]} ${priority} ${status}</strong></p>
    <p><strong>Status:</strong> ${results[priority][status]}</p>
    <p><strong>Job:</strong> ${env.JOB_NAME}</p>
    <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
    <p><strong>Triggered By:</strong> ${triggeredBy}</p>
    <p><strong>Time (IST):</strong> ${buildTime}</p>
    <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
    <p><strong>Coverage Report:</strong> <a href="${coverageUrl}">${coverageUrl}</a></p>
    ${failureReason}
  </body>
</html>
"""

    slackSend(channel: slackChannel, color: colors[status], message: slackMessage)
    mail(to: emailRecipients, subject: subjects[status], body: emailBody, mimeType: 'text/html')
}
